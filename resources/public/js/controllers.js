// Generated by CoffeeScript 1.4.0
(function() {
  var Controllers;

  Controllers = angular.module('Controllers', []);

  Controllers.controller('ClusterListCtrl', [
    '$scope', '$rootScope', '$location', '$log', 'Configuration', 'Stats', function($scope, $rootScope, $location, $log, $cluster_configuration, $cluster_stats) {
      var cluster_stats_query;
      $scope.errors = [];
      $scope.cluster_configuration;
      $scope.cluster_stats;
      $scope.gridApi;
      $scope.cluster_list_grid_configuration;
      cluster_stats_query;

      $scope.cluster_list_grid_configuration = {
        showFooter: true,
        showGroupPanel: true,
        showFilter: false,
        columnDefs: [
          {
            displayName: 'Cluster',
            field: 'cluster',
            name: 'cluster',
            width: '10%',
            groupable: true,
            cellTemplate: '/public/html/partials/cluser-name-cell.html'
          }, {
            displayName: 'Client Connections',
            field: 'client_connections',
            width: '5%'
          }, {
            displayName: 'Client Errors',
            field: 'client_err',
            width: '5%'
          }, {
            displayName: 'Forward Errors',
            field: 'forward_error',
            width: '5%'
          }, {
            displayName: 'Fragments',
            field: 'fragments',
            width: '5%'
          }, {
            displayName: 'Ejections',
            field: 'server_ejects',
            width: '5%'
          }, {
            displayName: 'Client EOF',
            field: 'client_eof',
            width: '5%'
          }, {
            displayName: 'Cluster Nodes',
            field: 'servers',
            width: '20%',
            cellTemplate: '/public/html/partials/node-cell.html'
          }
        ],
        groups: ['cluster'],
        onRegisterApi: function(gridApi) {
          return $scope.gridApi = gridApi;
        }
      };
      cluster_stats_query = $cluster_stats.list();
      cluster_stats_query.success(function(stats) {
        var cluster, stat;
        $scope.cluster_stats = stats;
        return $scope.cluster_list_grid_configuration.data = (function() {
          var _results;
          _results = [];
          for (cluster in stats) {
            stat = stats[cluster];
            if (_.isObject(stat)) {
              _results.push((function(cluster, stat) {
                var node, node_stats;
                if (_.isObject(stat)) {
                  return _.extend({
                    cluster: cluster,
                    servers: ((function() {
                      var _results1;
                      _results1 = [];
                      for (node in stat) {
                        node_stats = stat[node];
                        if (_.isObject(node_stats)) {
                          _results1.push(node);
                        }
                      }
                      return _results1;
                    })()).join(', ')
                  }, stat);
                }
              })(cluster, stat));
            }
          }
          return _results;
        })();
      });
      return cluster_stats_query.error(function(e) {
        return $scope.errors.push(e);
      });
    }
  ]);

  Controllers.controller('ClusterSelectCtrl', [
    '$scope', '$rootScope', '$location', '$log', '$routeParams', 'Configuration', 'Stats', function($scope, $rootScope, $location, $log, $routeParams, $cluster_configuration, $cluster_stats) {
      var cluster_config_query, cluster_stats_query;
      $scope.errors = [];
      $scope.cluster_configuration;
      $scope.cluster_stats;
      $scope.cluster_config;
      $scope.gridApi;
      $scope.selected_cluster;
      $scope.cluster_select_grid_configuration;
      cluster_stats_query;

      cluster_config_query;

      $scope.selected_cluster = $routeParams.cluster_name;
      cluster_stats_query = $cluster_stats.list();
      cluster_config_query = $cluster_configuration.list();
      cluster_stats_query.success(function(stats) {
        return $scope.cluster_stats = stats[$routeParams.cluster_name];
      });
      cluster_stats_query.error(function(e) {
        return $scope.errors.push(e);
      });
      cluster_config_query.success(function(config) {
        return $scope.cluster_config = config[$routeParams.cluster_name];
      });
      return cluster_config_query.error(function(e) {
        return $scope.errors.push(e);
      });
    }
  ]);

}).call(this);
